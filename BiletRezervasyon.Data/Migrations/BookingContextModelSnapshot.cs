// <auto-generated />
using System;
using BiletRezervasyon.Data.Concrete.EFcore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BiletRezervasyon.Data.Migrations
{
    [DbContext(typeof(BookingContext))]
    partial class BookingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.16");

            modelBuilder.Entity("BiletRezervasyon.Entities.Bus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BusDriverFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusPlaque")
                        .HasColumnType("TEXT");

                    b.Property<int>("BusSeatCapacity")
                        .HasColumnType("INTEGER");

                    b.HasKey("BusId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("BiletRezervasyon.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RouteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CityId");

                    b.HasIndex("RouteId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BiletRezervasyon.Entities.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstTerminal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hour")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastTerminal")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Terminal1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Terminal2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Terminal3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Terminal4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Terminal5")
                        .HasColumnType("TEXT");

                    b.HasKey("RouteId");

                    b.HasIndex("BusId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("BiletRezervasyon.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BoardingPoint")
                        .HasColumnType("TEXT");

                    b.Property<int>("BusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Destination")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassengerFirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassengerGender")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassengerIdentity")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassengerMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassengerPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassgerLastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PnrNo")
                        .HasColumnType("TEXT");

                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeatNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("TicketId");

                    b.HasIndex("BusId");

                    b.HasIndex("RouteId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BiletRezervasyon.Entities.City", b =>
                {
                    b.HasOne("BiletRezervasyon.Entities.Route", null)
                        .WithMany("Cities")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("BiletRezervasyon.Entities.Route", b =>
                {
                    b.HasOne("BiletRezervasyon.Entities.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("BiletRezervasyon.Entities.Ticket", b =>
                {
                    b.HasOne("BiletRezervasyon.Entities.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiletRezervasyon.Entities.Route", "Route")
                        .WithMany("Tickets")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BiletRezervasyon.Entities.Route", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
